<?xml version="1.0" encoding="UTF-8"?>
<!--
    stocks is client-server program to manage a household's food stock
    Copyright (C) 2019  The stocks developers

    This file is part of the stocks program suite.

    stocks is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stocks is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
-->
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"
        context="production">

    <changeSet id="1" author="admin">
        <sql endDelimiter=";;">
            create or replace function user_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "User" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.transaction_time_start
                                  and f.transaction_time_start &lt; p.valid_time_end
                            )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function user_initiates_ref_user_device() returns trigger
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select *
                    into count
                    from "User" f
                    where f.transaction_time_end = 'infinity'
                      and (
                            not exists(
                                    select *
                                    from "User_device" p
                                    where f.initiates = p."ID"
                                      and p.transaction_time_end = 'infinity'
                                      and p.valid_time_start &lt;= f.valid_time_start
                                      and f.valid_time_start &lt; p.valid_time_end
                                )
                            or not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt; f.valid_time_end
                                  and f.valid_time_end &lt;= p.valid_time_end
                            )
                        );
                    if count != 0 then
                        raise check_violation;
                    end if;
                    return new;
                end;
                $$;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="2" author="admin">
        <sql endDelimiter=";;">
            create or replace function location_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "Location" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.transaction_time_start
                                  and f.transaction_time_start &lt; p.valid_time_end
                            )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function location_initiates_ref_user_device() returns trigger
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select *
                    into count
                    from "Location" f
                    where f.transaction_time_end = 'infinity'
                      and (
                            not exists(
                                    select *
                                    from "User_device" p
                                    where f.initiates = p."ID"
                                      and p.transaction_time_end = 'infinity'
                                      and p.valid_time_start &lt;= f.valid_time_start
                                      and f.valid_time_start &lt; p.valid_time_end
                                )
                            or not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt; f.valid_time_end
                                  and f.valid_time_end &lt;= p.valid_time_end
                            )
                        );
                    if count != 0 then
                        raise check_violation;
                    end if;
                    return new;
                end;
                $$;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="3" author="admin">
        <sql endDelimiter=";;">
            create or replace function food_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "Food" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.transaction_time_start
                                  and f.transaction_time_start &lt; p.valid_time_end
                            )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function food_initiates_ref_user_device() returns trigger
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select *
                    into count
                    from "Food" f
                    where f.transaction_time_end = 'infinity'
                      and (
                            not exists(
                                    select *
                                    from "User_device" p
                                    where f.initiates = p."ID"
                                      and p.transaction_time_end = 'infinity'
                                      and p.valid_time_start &lt;= f.valid_time_start
                                      and f.valid_time_start &lt; p.valid_time_end
                                )
                            or not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt; f.valid_time_end
                                  and f.valid_time_end &lt;= p.valid_time_end
                            )
                        );
                    if count != 0 then
                        raise check_violation;
                    end if;
                    return new;
                end;
                $$;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="4" author="admin">
        <sql endDelimiter=";;">
            create or replace function user_device_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "User_device" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.transaction_time_start
                                  and f.transaction_time_start &lt; p.valid_time_end
                            )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function user_device_initiates_ref_user_device() returns trigger
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select *
                    into count
                    from "User_device" f
                    where f.transaction_time_end = 'infinity'
                      and (
                            not exists(
                                    select *
                                    from "User_device" p
                                    where f.initiates = p."ID"
                                      and p.transaction_time_end = 'infinity'
                                      and p.valid_time_start &lt;= f.valid_time_start
                                      and f.valid_time_start &lt; p.valid_time_end
                                )
                            or not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt; f.valid_time_end
                                  and f.valid_time_end &lt;= p.valid_time_end
                            )
                        );
                    if count != 0 then
                        raise check_violation;
                    end if;
                    return new;
                end;
                $$;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="5" author="admin">
        <sql endDelimiter=";;">
            create or replace function food_item_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "Food_item" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.transaction_time_start
                                  and f.transaction_time_start &lt; p.valid_time_end
                            )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function food_item_initiates_ref_user_device() returns trigger
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select *
                    into count
                    from "Food_item" f
                    where f.transaction_time_end = 'infinity'
                      and (
                            not exists(
                                    select *
                                    from "User_device" p
                                    where f.initiates = p."ID"
                                      and p.transaction_time_end = 'infinity'
                                      and p.valid_time_start &lt;= f.valid_time_start
                                      and f.valid_time_start &lt; p.valid_time_end
                                )
                            or not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt; f.valid_time_end
                                  and f.valid_time_end &lt;= p.valid_time_end
                            )
                        );
                    if count != 0 then
                        raise check_violation;
                    end if;
                    return new;
                end;
                $$;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="6" author="admin">
        <sql endDelimiter=";;">
            create or replace function ean_number_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "EAN_number" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.transaction_time_start
                                  and f.transaction_time_start &lt; p.valid_time_end
                            )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function ean_number_initiates_ref_user_device() returns trigger
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select *
                    into count
                    from "EAN_number" f
                    where f.transaction_time_end = 'infinity'
                      and (
                            not exists(
                                    select *
                                    from "User_device" p
                                    where f.initiates = p."ID"
                                      and p.transaction_time_end = 'infinity'
                                      and p.valid_time_start &lt;= f.valid_time_start
                                      and f.valid_time_start &lt; p.valid_time_end
                                )
                            or not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt; f.valid_time_end
                                  and f.valid_time_end &lt;= p.valid_time_end
                            )
                        );
                    if count != 0 then
                        raise check_violation;
                    end if;
                    return new;
                end;
                $$;;
            </sql>
        </rollback>
    </changeSet>
</databaseChangeLog>
