<?xml version="1.0" encoding="UTF-8"?>
<!--
    stocks is client-server program to manage a household's food stock
    Copyright (C) 2019  The stocks developers

    This file is part of the stocks program suite.

    stocks is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stocks is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
-->
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"
        context="production">

    <changeSet id="1" author="admin">
        <sql endDelimiter=";;">
            with earliest_timestamp as (select min(transaction_time_start) from "User"),
            earliest_local_timestamp as (select min(transaction_time_start) from "User_device")
            update "User_device"
            set transaction_time_start = (select * from earliest_timestamp),
            valid_time_start = (select * from earliest_timestamp)
            where transaction_time_start = (select * from earliest_local_timestamp);;
        </sql>
        <rollback/>
    </changeSet>
    <changeSet id="2" author="admin">
        <sql endDelimiter=";;">
            alter table "User" add column initiates int;;

            update "User" f
            set initiates = (
                select min("ID")
                from "User_device" p
                where p.valid_time_start &lt;= f.valid_time_start
                and f.valid_time_start &lt; p.valid_time_end
                and p.transaction_time_end = 'infinity');;

            create or replace function user_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "User" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.valid_time_start
                                  and f.valid_time_start &lt; p.valid_time_end
                            )
                        or not exists(
                            select *
                            from "User_device" p
                            where f.initiates = p."ID"
                              and p.transaction_time_end = 'infinity'
                              and p.valid_time_start &lt; f.valid_time_end
                              and f.valid_time_end &lt;= p.valid_time_end
                        )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
            create constraint trigger user_initiates_ref_user_device
                after update or delete
                on "User_device"
                deferrable initially deferred
                for each row
            execute function user_initiates_ref_user_device();;
            create constraint trigger user_initiates_ref_user_device
                after insert or update
                on "User"
                deferrable initially deferred
                for each row
            execute function user_initiates_ref_user_device();;
        </sql>
        <rollback>
            drop function user_initiates_ref_user_device cascade;
            alter table "User" drop column initiates;
        </rollback>
    </changeSet>
    <changeSet id="3" author="admin">
        <sql endDelimiter=";;">
            alter table "Location" add column initiates int;;

            update "Location" f
            set initiates = (
                select min("ID")
                from "User_device" p
                where p.valid_time_start &lt;= f.valid_time_start
                and f.valid_time_start &lt; p.valid_time_end
                and p.transaction_time_end = 'infinity');;

            create or replace function location_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "Location" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.valid_time_start
                                  and f.valid_time_start &lt; p.valid_time_end
                            )
                        or not exists(
                            select *
                            from "User_device" p
                            where f.initiates = p."ID"
                              and p.transaction_time_end = 'infinity'
                              and p.valid_time_start &lt; f.valid_time_end
                              and f.valid_time_end &lt;= p.valid_time_end
                        )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
            create constraint trigger location_initiates_ref_user_device
                after update or delete
                on "User_device"
                deferrable initially deferred
                for each row
            execute function location_initiates_ref_user_device();
            create constraint trigger location_initiates_ref_user_device
                after insert or update
                on "Location"
                deferrable initially deferred
                for each row
            execute function location_initiates_ref_user_device();
        </sql>
        <rollback>
            drop function location_initiates_ref_user_device cascade;
            alter table "Location" drop column initiates;
        </rollback>
    </changeSet>
    <changeSet id="4" author="admin">
        <sql endDelimiter=";;">
            alter table "Food" add column initiates int;;

            update "Food" f
            set initiates = (
                select min("ID")
                from "User_device" p
                where p.valid_time_start &lt;= f.valid_time_start
                and f.valid_time_start &lt; p.valid_time_end
                and p.transaction_time_end = 'infinity');;

            create or replace function food_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "Food" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.valid_time_start
                                  and f.valid_time_start &lt; p.valid_time_end
                            )
                        or not exists(
                            select *
                            from "User_device" p
                            where f.initiates = p."ID"
                              and p.transaction_time_end = 'infinity'
                              and p.valid_time_start &lt; f.valid_time_end
                              and f.valid_time_end &lt;= p.valid_time_end
                        )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
            create constraint trigger food_initiates_ref_user_device
                after update or delete
                on "User_device"
                deferrable initially deferred
                for each row
            execute function food_initiates_ref_user_device();;
            create constraint trigger food_initiates_ref_user_device
                after insert or update
                on "Food"
                deferrable initially deferred
                for each row
            execute function food_initiates_ref_user_device();;
        </sql>
        <rollback>
            drop function food_initiates_ref_user_device cascade;
            alter table "Food" drop column initiates;
        </rollback>
    </changeSet>
    <changeSet id="5" author="admin">
        <sql endDelimiter=";;">
            alter table "User_device" add column initiates int;;

            update "User_device" f
            set initiates = (
                select min("ID")
                from "User_device" p
                where p.valid_time_start &lt;= f.valid_time_start
                and f.valid_time_start &lt; p.valid_time_end
                and p.transaction_time_end = 'infinity');;

            create or replace function user_device_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "User_device" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.valid_time_start
                                  and f.valid_time_start &lt; p.valid_time_end
                            )
                        or not exists(
                            select *
                            from "User_device" p
                            where f.initiates = p."ID"
                              and p.transaction_time_end = 'infinity'
                              and p.valid_time_start &lt; f.valid_time_end
                              and f.valid_time_end &lt;= p.valid_time_end
                        )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
            create constraint trigger user_device_initiates_ref_user_device
                after insert or update or delete
                on "User_device"
                deferrable initially deferred
                for each row
            execute function user_device_initiates_ref_user_device();
        </sql>
        <rollback>
            drop function user_device_initiates_ref_user_device cascade;
            alter table "User_device" drop column initiates;
        </rollback>
    </changeSet>
    <changeSet id="6" author="admin">
        <sql endDelimiter=";;">
            alter table "Food_item" add column initiates int;;

            update "Food_item" f
            set initiates = (
                select min("ID")
                from "User_device" p
                where p.valid_time_start &lt;= f.valid_time_start
                and f.valid_time_start &lt; p.valid_time_end
                and p.transaction_time_end = 'infinity');;

            create or replace function food_item_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "Food_item" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.valid_time_start
                                  and f.valid_time_start &lt; p.valid_time_end
                            )
                        or not exists(
                            select *
                            from "User_device" p
                            where f.initiates = p."ID"
                              and p.transaction_time_end = 'infinity'
                              and p.valid_time_start &lt; f.valid_time_end
                              and f.valid_time_end &lt;= p.valid_time_end
                        )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
            create constraint trigger food_item_initiates_ref_user_device
                after update or delete
                on "User_device"
                deferrable initially deferred
                for each row
            execute function food_item_initiates_ref_user_device();
            create constraint trigger food_item_initiates_ref_user_device
                after insert or update
                on "Food_item"
                deferrable initially deferred
                for each row
            execute function food_item_initiates_ref_user_device();
        </sql>
        <rollback>
            drop function food_item_initiates_ref_user_device cascade;
            alter table "Food_item" drop column initiates;
        </rollback>
    </changeSet>
    <changeSet id="7" author="admin">
        <sql endDelimiter=";;">
            alter table "EAN_number" add column initiates int;;

            update "EAN_number" f
            set initiates = (
                select min("ID")
                from "User_device" p
                where p.valid_time_start &lt;= f.valid_time_start
                and f.valid_time_start &lt; p.valid_time_end
                and p.transaction_time_end = 'infinity');;

            create or replace function ean_number_initiates_ref_user_device() returns trigger
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select *
                into count
                from "EAN_number" f
                where f.transaction_time_end = 'infinity'
                  and (
                        not exists(
                                select *
                                from "User_device" p
                                where f.initiates = p."ID"
                                  and p.transaction_time_end = 'infinity'
                                  and p.valid_time_start &lt;= f.valid_time_start
                                  and f.valid_time_start &lt; p.valid_time_end
                            )
                        or not exists(
                            select *
                            from "User_device" p
                            where f.initiates = p."ID"
                              and p.transaction_time_end = 'infinity'
                              and p.valid_time_start &lt; f.valid_time_end
                              and f.valid_time_end &lt;= p.valid_time_end
                        )
                    );
                if count != 0 then
                    raise check_violation;
                end if;
                return new;
            end;
            $$;
            create constraint trigger ean_number_initiates_ref_user_device
                after update or delete
                on "User_device"
                deferrable initially deferred
                for each row
            execute function ean_number_initiates_ref_user_device();
            create constraint trigger ean_number_initiates_ref_user_device
                after insert or update
                on "EAN_number"
                deferrable initially deferred
                for each row
            execute function ean_number_initiates_ref_user_device();
        </sql>
        <rollback>
            drop function ean_number_initiates_ref_user_device cascade;
            alter table "EAN_number" drop column initiates;
        </rollback>
    </changeSet>
    <changeSet id="8" author="admin">
        <sql>
            alter table "User" alter column initiates set not null;
            alter table "Location" alter column initiates set not null;
            alter table "Food" alter column initiates set not null;
            alter table "User_device" alter column initiates set not null;
            alter table "Food_item" alter column initiates set not null;
            alter table "EAN_number" alter column initiates set not null;
        </sql>
        <rollback>
            alter table "User" alter column initiates drop not null;
            alter table "Location" alter column initiates drop not null;
            alter table "Food" alter column initiates drop not null;
            alter table "User_device" alter column initiates drop not null;
            alter table "Food_item" alter column initiates drop not null;
            alter table "EAN_number" alter column initiates drop not null;
        </rollback>
    </changeSet>
</databaseChangeLog>
