<?xml version="1.0" encoding="UTF-8"?>
<!--
    stocks is client-server program to manage a household's food stock
    Copyright (C) 2019  The stocks developers

    This file is part of the stocks program suite.

    stocks is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stocks is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
-->
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"
        context="production">

    <changeSet id="1" author="admin">
        <sql endDelimiter=";;">

            -- arg 0: Column to enforce uniqueness on
            create or replace function bitemporal_sequenced_uniqueness() returns trigger
                language PLPGSQL
            as
            $$
            declare
            violating_row_count int;
            begin
            execute format(
                    'select count(*) '
                        'from %I as u1 '
                        'where 1 &lt; ( '
                            'select count(*) '
                            'from %I as u2 '
                            'where u1.%I = u2.%I '
                            'and u1.valid_time_start &lt; u2.valid_time_end '
                            'and u2.valid_time_start &lt; u1.valid_time_end '
                            'and u1.transaction_time_end = %L '
                            'and u2.transaction_time_end = %L '
                        ')',
                    tg_table_name, tg_table_name, tg_argv[0], tg_argv[0], 'infinity', 'infinity')
                into violating_row_count;

            if violating_row_count != 0 then
                    raise check_violation using message = 'on ' || tg_table_name || '.' || tg_argv[0];
            end if;
            return new;
            end;
            $$;;
        </sql>
        <rollback>
            <sql>
                drop function bitemporal_sequenced_uniqueness;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="2" author="admin">
        <sql>
            alter table user_device add column technical_use_case text not null default '';

            create constraint trigger user_device_technical_use_case_bitemporal_sequenced_uniqueness
            after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end, technical_use_case or delete
            on user_device
            deferrable initially deferred
            for each row
            execute function bitemporal_sequenced_uniqueness('technical_use_case');
        </sql>
        <rollback>
            <sql>
                drop trigger user_device_technical_use_case_bitemporal_sequenced_uniqueness on user_device;
                alter table user_device drop column technical_use_case;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="3" author="admin">
        <sql>
            insert into "user" (name, initiates)
            select 'Stocks', min(id)
            from user_device
            where valid_time_start &lt;= current_timestamp
            and current_timestamp &lt; valid_time_end
            and transaction_time_end = 'infinity';

            insert into user_device (name, belongs_to, technical_use_case, initiates)
            select 'Job Runner', lastval(), 'job-runner', min(id)
            from user_device
            where valid_time_start &lt;= current_timestamp
            and current_timestamp &lt; valid_time_end
            and transaction_time_end = 'infinity';
        </sql>
        <rollback>
            <sql>
                insert into user_device (id, name, version, belongs_to, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end, initiates, technical_use_case)
                select id, name, version, belongs_to, valid_time_start, current_timestamp + '1 microsecond', current_timestamp, 'infinity', id, technical_use_case
                from user_device
                where technical_use_case != ''
                and valid_time_start &lt;= current_timestamp
                and current_timestamp &lt;= valid_time_end
                and transaction_time_end = 'infinity';

                update user_device
                set transaction_time_end = current_timestamp
                where technical_use_case != ''
                and current_timestamp + '1 microsecond' &lt; valid_time_end
                and transaction_time_end = 'infinity';

                insert into "user" (id, name, version, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end, initiates)
                select id, name, version, valid_time_start, current_timestamp + '1 microsecond', current_timestamp, 'infinity', id
                from "user"
                where id in (select belongs_to from user_device where technical_use_case != '')
                and valid_time_start &lt;= current_timestamp
                and current_timestamp &lt;= valid_time_end
                and transaction_time_end = 'infinity';

                update "user"
                set transaction_time_end = current_timestamp
                where id in (select belongs_to from user_device where technical_use_case != '')
                and current_timestamp + '1 microsecond' &lt; valid_time_end
                and transaction_time_end = 'infinity';
            </sql>
        </rollback>
    </changeSet>
</databaseChangeLog>
