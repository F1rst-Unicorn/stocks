<?xml version="1.0" encoding="UTF-8"?>
<!--
    stocks is client-server program to manage a household's food stock
    Copyright (C) 2019  The stocks developers

    This file is part of the stocks program suite.

    stocks is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stocks is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see https://www.gnu.org/licenses/.
-->
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.8.xsd"
        context="production">

    <changeSet id="1" author="admin">
        <sql>
            create table recipe_product (
                id serial not null,
                version int not null default 0,
                valid_time_start timestamp(6) with time zone not null default current_timestamp,
                valid_time_end timestamp(6) with time zone not null default 'infinity',
                transaction_time_start timestamp(6) with time zone not null default current_timestamp,
                transaction_time_end timestamp (6) with time zone not null default 'infinity',
                amount int not null,
                product int not null,
                recipe int not null,
                unit int not null,
                initiates int not null
            );

            create index recipe_product_pkey on recipe_product (id);

            create index recipe_product_current
            on recipe_product (id asc, valid_time_start asc, valid_time_end asc)
            where transaction_time_end = 'infinity';

            create constraint trigger "recipe_product_bitemporal_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe_product
                deferrable initially deferred
                for each row
            execute function bitemporal_primary_key();

            create constraint trigger "recipe_product_contiguous_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe_product
                deferrable initially deferred
                for each row
            execute function contiguous_primary_key();
        </sql>
        <rollback>
            drop table recipe_product;
        </rollback>
    </changeSet>
    <changeSet id="2" author="admin">
        <sql>
            create table recipe_ingredient (
                id serial not null,
                version int not null default 0,
                valid_time_start timestamp(6) with time zone not null default current_timestamp,
                valid_time_end timestamp(6) with time zone not null default 'infinity',
                transaction_time_start timestamp(6) with time zone not null default current_timestamp,
                transaction_time_end timestamp (6) with time zone not null default 'infinity',
                amount int not null,
                ingredient int not null,
                recipe int not null,
                unit int not null,
                initiates int not null
            );

            create index recipe_ingredient_pkey on recipe_ingredient (id);

            create index recipe_ingredient_current
            on recipe_ingredient (id asc, valid_time_start asc, valid_time_end asc)
            where transaction_time_end = 'infinity';

            create constraint trigger "recipe_ingredient_bitemporal_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe_ingredient
                deferrable initially deferred
                for each row
            execute function bitemporal_primary_key();

            create constraint trigger "recipe_ingredient_contiguous_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe_ingredient
                deferrable initially deferred
                for each row
            execute function contiguous_primary_key();
        </sql>
        <rollback>
            drop table recipe_ingredient;
        </rollback>
    </changeSet>
    <changeSet id="3" author="admin">
        <sql>
            create table scaled_unit (
                id serial not null,
                version int not null default 0,
                valid_time_start timestamp(6) with time zone not null default current_timestamp,
                valid_time_end timestamp(6) with time zone not null default 'infinity',
                transaction_time_start timestamp(6) with time zone not null default current_timestamp,
                transaction_time_end timestamp (6) with time zone not null default 'infinity',
                scale numeric not null,
                unit int not null,
                initiates int not null
            );

            create index scaled_unit_pkey on scaled_unit (id);

            create index scaled_unit_current
            on scaled_unit (id asc, valid_time_start asc, valid_time_end asc)
            where transaction_time_end = 'infinity';

            create constraint trigger "scaled_unit_bitemporal_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function bitemporal_primary_key();

            create constraint trigger "scaled_unit_contiguous_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function contiguous_primary_key();
        </sql>
        <rollback>
            drop table scaled_unit;
        </rollback>
    </changeSet>
    <changeSet id="4" author="admin">
        <sql>
            create table recipe (
                id serial not null,
                version int not null default 0,
                valid_time_start timestamp(6) with time zone not null default current_timestamp,
                valid_time_end timestamp(6) with time zone not null default 'infinity',
                transaction_time_start timestamp(6) with time zone not null default current_timestamp,
                transaction_time_end timestamp (6) with time zone not null default 'infinity',
                name text not null,
                instructions text not null,
                duration interval not null,
                initiates int not null
            );

            create index recipe_pkey on recipe (id);

            create index recipe_current
            on recipe (id asc, valid_time_start asc, valid_time_end asc)
            where transaction_time_end = 'infinity';

            create constraint trigger "recipe_bitemporal_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe
                deferrable initially deferred
                for each row
            execute function bitemporal_primary_key();

            create constraint trigger "recipe_contiguous_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe
                deferrable initially deferred
                for each row
            execute function contiguous_primary_key();
        </sql>
        <rollback>
            drop table recipe;
        </rollback>
    </changeSet>
    <changeSet id="5" author="admin">
        <sql>
            create table unit (
                id serial not null,
                version int not null default 0,
                valid_time_start timestamp(6) with time zone not null default current_timestamp,
                valid_time_end timestamp(6) with time zone not null default 'infinity',
                transaction_time_start timestamp(6) with time zone not null default current_timestamp,
                transaction_time_end timestamp (6) with time zone not null default 'infinity',
                name text not null,
                abbreviation text not null,
                initiates int not null
            );

            create index unit_pkey on unit (id);

            create index unit_current
            on unit (id asc, valid_time_start asc, valid_time_end asc)
            where transaction_time_end = 'infinity';

            create constraint trigger "unit_bitemporal_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on unit
                deferrable initially deferred
                for each row
            execute function bitemporal_primary_key();

            create constraint trigger "unit_contiguous_primary_key"
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on unit
                deferrable initially deferred
                for each row
            execute function contiguous_primary_key();
        </sql>
        <rollback>
            drop table unit;
        </rollback>
    </changeSet>
    <changeSet id="6" author="admin">
        <sql>
            create constraint trigger recipe_product_product_ref_food
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_product
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_product', 'product', 'food');

            create constraint trigger recipe_product_product_ref_food
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on food
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_product', 'product', 'food');
        </sql>
        <rollback>
            drop trigger recipe_product_product_ref_food on recipe_product;
            drop trigger recipe_product_product_ref_food on food;
        </rollback>
    </changeSet>
    <changeSet id="7" author="admin">
        <sql>
            create constraint trigger recipe_product_unit_ref_scaled_unit
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_product
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_product', 'unit', 'scaled_unit');

            create constraint trigger recipe_product_unit_ref_scaled_unit
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_product', 'unit', 'scaled_unit');
        </sql>
        <rollback>
            drop trigger recipe_product_unit_ref_scaled_unit on recipe_product;
            drop trigger recipe_product_unit_ref_scaled_unit on scaled_unit;
        </rollback>
    </changeSet>
    <changeSet id="8" author="admin">
        <sql>
            create constraint trigger recipe_product_recipe_ref_recipe
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_product
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_product', 'recipe', 'recipe');

            create constraint trigger recipe_product_recipe_ref_recipe
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_product', 'recipe', 'recipe');
        </sql>
        <rollback>
            drop trigger recipe_product_recipe_ref_recipe on recipe_product;
            drop trigger recipe_product_recipe_ref_recipe on recipe;
        </rollback>
    </changeSet>
    <changeSet id="9" author="admin">
        <sql>
            create constraint trigger recipe_product_initiates_ref_user_device
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_product
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('recipe_product');

            create constraint trigger recipe_product_initiates_ref_user_device
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on user_device
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('recipe_product');
        </sql>
        <rollback>
            drop trigger recipe_product_initiates_ref_user_device on recipe_product;
            drop trigger recipe_product_initiates_ref_user_device on user_device;
        </rollback>
    </changeSet>
    <changeSet id="10" author="admin">
        <sql>
            create constraint trigger recipe_ingredient_ingredient_ref_food
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_ingredient
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_ingredient', 'ingredient', 'food');

            create constraint trigger recipe_ingredient_ingredient_ref_food
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on food
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_ingredient', 'ingredient', 'food');
        </sql>
        <rollback>
            drop trigger recipe_ingredient_ingredient_ref_food on recipe_ingredient;
            drop trigger recipe_ingredient_ingredient_ref_food on food;
        </rollback>
    </changeSet>
    <changeSet id="11" author="admin">
        <sql>
            create constraint trigger recipe_ingredient_unit_ref_scaled_unit
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_ingredient
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_ingredient', 'unit', 'scaled_unit');

            create constraint trigger recipe_ingredient_unit_ref_scaled_unit
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_ingredient', 'unit', 'scaled_unit');
        </sql>
        <rollback>
            drop trigger recipe_ingredient_unit_ref_scaled_unit on recipe_ingredient;
            drop trigger recipe_ingredient_unit_ref_scaled_unit on scaled_unit;
        </rollback>
    </changeSet>
    <changeSet id="12" author="admin">
        <sql>
            create constraint trigger recipe_ingredient_recipe_ref_recipe
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_ingredient
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_ingredient', 'recipe', 'recipe');

            create constraint trigger recipe_ingredient_recipe_ref_recipe
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on recipe
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('recipe_ingredient', 'recipe', 'recipe');
        </sql>
        <rollback>
            drop trigger recipe_ingredient_recipe_ref_recipe on recipe_ingredient;
            drop trigger recipe_ingredient_recipe_ref_recipe on recipe;
        </rollback>
    </changeSet>
    <changeSet id="13" author="admin">
        <sql>
            create constraint trigger recipe_ingredient_initiates_ref_user_device
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe_ingredient
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('recipe_ingredient');

            create constraint trigger recipe_ingredient_initiates_ref_user_device
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on user_device
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('recipe_ingredient');
        </sql>
        <rollback>
            drop trigger recipe_ingredient_initiates_ref_user_device on recipe_ingredient;
            drop trigger recipe_ingredient_initiates_ref_user_device on user_device;
        </rollback>
    </changeSet>
    <changeSet id="14" author="admin">
        <sql>
            create constraint trigger scaled_unit_unit_ref_unit
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('scaled_unit', 'unit', 'unit');

            create constraint trigger scaled_unit_unit_ref_unit
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on unit
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('scaled_unit', 'unit', 'unit');
        </sql>
        <rollback>
            drop trigger scaled_unit_unit_ref_unit on scaled_unit;
            drop trigger scaled_unit_unit_ref_unit on unit;
        </rollback>
    </changeSet>
    <changeSet id="15" author="admin">
        <sql>
            create constraint trigger scaled_unit_initiates_ref_user_device
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('scaled_unit');

            create constraint trigger scaled_unit_initiates_ref_user_device
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on user_device
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('scaled_unit');
        </sql>
        <rollback>
            drop trigger scaled_unit_initiates_ref_user_device on scaled_unit;
            drop trigger scaled_unit_initiates_ref_user_device on user_device;
        </rollback>
    </changeSet>
    <changeSet id="16" author="admin">
        <sql>
            create constraint trigger recipe_initiates_ref_user_device
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on recipe
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('recipe');

            create constraint trigger recipe_initiates_ref_user_device
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on user_device
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('recipe');
        </sql>
        <rollback>
            drop trigger recipe_initiates_ref_user_device on recipe;
            drop trigger recipe_initiates_ref_user_device on user_device;
        </rollback>
    </changeSet>
    <changeSet id="17" author="admin">
        <sql>
            create constraint trigger unit_initiates_ref_user_device
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on unit
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('unit');

            create constraint trigger unit_initiates_ref_user_device
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on user_device
                deferrable initially deferred
                for each row
            execute function bitemporal_initiates_foreign_key('unit');
        </sql>
        <rollback>
            drop trigger unit_initiates_ref_user_device on unit;
            drop trigger unit_initiates_ref_user_device on user_device;
        </rollback>
    </changeSet>
    <changeSet id="18" author="admin">
        <sql endDelimiter=";;">
            create or replace function create_initial_user() returns void
                language plpgsql
            as
            $$
            declare
                count int;
            begin
                select count(*)
                into count
                from user_device;

                if count != 0 then
                    return;
                end if;

                insert into "user" (name, initiates)
                values ('Default', 0);

                insert into user_device (name, belongs_to, initiates)
                values ('Default', lastval(), 0);

                update "user"
                set initiates = (select min(id) from user_device);

                update user_device
                set initiates = (select min(id) from user_device);

                insert into ticket (ticket, belongs_device)
                select '0000', id
                from user_device;
            end;
            $$;;

            select create_initial_user();;

            drop function create_initial_user cascade;;
        </sql>
        <rollback>
            <sql endDelimiter=";;">
                create or replace function drop_initial_user() returns void
                    language plpgsql
                as
                $$
                declare
                    count int;
                begin
                    select count(*)
                    into count
                    from ticket
                    where ticket = '0000' and belongs_device = 1;

                    if count != 1 then
                        return;
                    end if;

                    delete from ticket;
                    delete from "user";
                    delete from user_device;
                end;
                $$;;

                select drop_initial_user();;

                drop function drop_initial_user cascade;;
            </sql>
        </rollback>
    </changeSet>
    <changeSet id="19" author="admin">
        <sql>
            insert into unit (name, abbreviation, initiates, valid_time_start, transaction_time_start)
            select 'Default', 'default', min(id), min(valid_time_start), min(transaction_time_start)
            from user_device
            where valid_time_start &lt;= current_timestamp
            and current_timestamp &lt; valid_time_end
            and transaction_time_end = 'infinity';

            insert into scaled_unit (scale, unit, initiates, valid_time_start, transaction_time_start)
            select 1, lastval(), min(id), min(valid_time_start), min(transaction_time_start)
            from user_device
            where valid_time_start &lt;= current_timestamp
            and current_timestamp &lt; valid_time_end
            and transaction_time_end = 'infinity';
        </sql>
        <rollback>
            truncate unit;
            truncate scaled_unit;
        </rollback>
    </changeSet>
    <changeSet id="20" author="admin">
        <sql>
            alter table food add column store_unit int;
            update food set store_unit = (select min(id) from scaled_unit);
        </sql>
        <rollback>
            alter table food drop column store_unit;
        </rollback>
    </changeSet>
    <changeSet id="21" author="admin">
        <sql>
            alter table food alter column store_unit set not null;
        </sql>
        <rollback>
            alter table food alter column store_unit drop not null;
        </rollback>
    </changeSet>
    <changeSet id="22" author="admin">
        <sql>
            create constraint trigger food_store_unit_ref_scaled_unit
                after insert or update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end
                on food
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('food', 'store_unit', 'scaled_unit');

            create constraint trigger food_store_unit_ref_scaled_unit
                after update of id, valid_time_start, valid_time_end, transaction_time_start, transaction_time_end or delete
                on scaled_unit
                deferrable initially deferred
                for each row
            execute function bitemporal_foreign_key('food', 'store_unit', 'scaled_unit');
        </sql>
        <rollback>
            drop trigger food_store_unit_ref_scaled_unit on food;
            drop trigger food_store_unit_ref_scaled_unit on scaled_unit;
        </rollback>
    </changeSet>
    <changeSet id="23" author="admin">
        <sql>
            create or replace view updates (id, table_name, last_update) as
            select 1,
                   'Location',
                   coalesce(max(transaction_time_start), current_timestamp)
            from location
            union
            select 2,
                   'User',
                   coalesce(max(transaction_time_start), current_timestamp)
            from "user"
            union
            select 3,
                   'User_device',
                   coalesce(max(transaction_time_start), current_timestamp)
            from user_device
            union
            select 4,
                   'Food',
                   coalesce(max(transaction_time_start), current_timestamp)
            from food
            union
            select 5,
                   'Food_item',
                   coalesce(max(transaction_time_start), current_timestamp)
            from food_item
            union
            select 6,
                   'EAN_number',
                   coalesce(max(transaction_time_start), current_timestamp)
            from ean_number
            union
            select 7,
                   'recipe_product',
                   coalesce(max(transaction_time_start), current_timestamp)
            from recipe_product
            union
            select 8,
                   'recipe_ingredient',
                   coalesce(max(transaction_time_start), current_timestamp)
            from recipe_ingredient
            union
            select 9,
                   'scaled_unit',
                   coalesce(max(transaction_time_start), current_timestamp)
            from scaled_unit
            union
            select 10,
                   'recipe',
                   coalesce(max(transaction_time_start), current_timestamp)
            from recipe
            union
            select 11,
                   'unit',
                   coalesce(max(transaction_time_start), current_timestamp)
            from unit;
        </sql>
        <rollback>
            create or replace view updates (id, table_name, last_update) as
            select 1,
                   'Location',
                   coalesce(max(transaction_time_start), current_timestamp)
            from location
            union
            select 2,
                   'User',
                   coalesce(max(transaction_time_start), current_timestamp)
            from "user"
            union
            select 3,
                   'User_device',
                   coalesce(max(transaction_time_start), current_timestamp)
            from user_device
            union
            select 4,
                   'Food',
                   coalesce(max(transaction_time_start), current_timestamp)
            from food
            union
            select 5,
                   'Food_item',
                   coalesce(max(transaction_time_start), current_timestamp)
            from food_item
            union
            select 6,
                   'EAN_number',
                   coalesce(max(transaction_time_start), current_timestamp)
            from ean_number;
        </rollback>
    </changeSet>
    <changeSet id="24" author="admin">
        <sql>
            create index user_transaction_time_end on "user" (transaction_time_end);
            create index user_device_transaction_time_end on user_device (transaction_time_end);
            create index location_transaction_time_end on location (transaction_time_end);
            create index food_transaction_time_end on food (transaction_time_end);
            create index food_item_transaction_time_end on food_item (transaction_time_end);
            create index ean_number_transaction_time_end on ean_number (transaction_time_end);
            create index recipe_ingredient_transaction_time_end on recipe_ingredient (transaction_time_end);
            create index recipe_product_transaction_time_end on recipe_product (transaction_time_end);
            create index recipe_transaction_time_end on recipe (transaction_time_end);
            create index unit_transaction_time_end on unit (transaction_time_end);
            create index scaled_unit_transaction_time_end on scaled_unit (transaction_time_end);

            create index user_transaction_time_start on "user" (transaction_time_start);
            create index user_device_transaction_time_start on user_device (transaction_time_start);
            create index location_transaction_time_start on location (transaction_time_start);
            create index food_transaction_time_start on food (transaction_time_start);
            create index food_item_transaction_time_start on food_item (transaction_time_start);
            create index ean_number_transaction_time_start on ean_number (transaction_time_start);
            create index recipe_ingredient_transaction_time_start on recipe_ingredient (transaction_time_start);
            create index recipe_product_transaction_time_start on recipe_product (transaction_time_start);
            create index recipe_transaction_time_start on recipe (transaction_time_start);
            create index unit_transaction_time_start on unit (transaction_time_start);
            create index scaled_unit_transaction_time_start on scaled_unit (transaction_time_start);
        </sql>
        <rollback>
            drop index user_transaction_time_end;
            drop index user_device_transaction_time_end;
            drop index location_transaction_time_end;
            drop index food_transaction_time_end;
            drop index food_item_transaction_time_end;
            drop index ean_number_transaction_time_end;
            drop index recipe_ingredient_transaction_time_end;
            drop index recipe_product_transaction_time_end;
            drop index recipe_transaction_time_end;
            drop index unit_transaction_time_end;
            drop index scaled_unit_transaction_time_end;

            drop index user_transaction_time_start;
            drop index user_device_transaction_time_start;
            drop index location_transaction_time_start;
            drop index food_transaction_time_start;
            drop index food_item_transaction_time_start;
            drop index ean_number_transaction_time_start;
            drop index recipe_ingredient_transaction_time_start;
            drop index recipe_product_transaction_time_start;
            drop index recipe_transaction_time_start;
            drop index unit_transaction_time_start;
            drop index scaled_unit_transaction_time_start;
        </rollback>
    </changeSet>
</databaseChangeLog>
