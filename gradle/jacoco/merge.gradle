apply from: "${project.rootDir}/gradle/jacoco/common.gradle"

task mergeCoverageReports(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports on the whole build"
    onlyIf = { true }


    subprojects.forEach {
        dependsOn("${it.name}:check")
        if (it.name.endsWith("android")) {
            dependsOn("${it.name}:connectedCheck")

            if (!it.name.endsWith("app-android")) {
                dependsOn("${it.name}:testCoverageUnitTestCoverage")
                dependsOn("${it.name}:copyCoverageJniLibsProjectOnly")
                dependsOn("${it.name}:copyReleaseJniLibsProjectOnly")
                dependsOn("${it.name}:mergeReleaseResources")
                dependsOn("${it.name}:mergeCoverageResources")
                dependsOn("${it.name}:mergeDebugResources")
                dependsOn("${it.name}:bundleLibRuntimeToDirCoverage")
                dependsOn("${it.name}:bundleLibRuntimeToDirRelease")
            }
        } else {
            dependsOn("${it.name}:jacocoTestReport")
        }
    }

    def sourceDirs = []

    subprojects.forEach {
        sourceDirs += [
            "${it.name}/src/main/java",
            "${it.name}/src/prod/java",
            "${it.name}/src/uimock/java",
        ]
    }

    classDirectories.setFrom(fileTree(dir: "${project.rootDir}", includes: [
        "**/intermediates/javac/coverage/**/classes/**/*.class",
        "**/intermediates/javac/prodDebug/**/classes/**/*.class",
        "**/intermediates/javac/uimockDebug/**/classes/**/*.class",
        "**/build/classes/**/*.class",
        "**/tmp/kotlin-classes/**/*.class",
    ], excludes: coverageExclusionFiles))
    sourceDirectories.setFrom(files(sourceDirs))
    additionalSourceDirs.setFrom(files(sourceDirs))

    executionData.setFrom(fileTree(dir: "${project.rootDir}", includes: [
        "**/*.exec",
        "**/*.ec"
    ]))

    reports {
        html.enabled true
        html.destination file("${buildDir}/coverage-report")
    }
}
