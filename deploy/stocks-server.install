## arg 1:  the new package version
#pre_install() {
	# do something here
#}

## arg 1:  the new package version
post_install() {
    
    useradd -g users stocks
    
    ## Set up the database
    sqlpassword='fdsaieosa32fd$2&3)'
    mkdir -p /srv/stocks/mysql
	mysql_install_db --user=mysql --basedir=/usr --datadir=/srv/stocks/mysql
	echo "SET PASSWORD = PASSWORD('$sqlpassword');" | mysql -u root -p --password=''
	echo "CREATE USER 'server'@'localhost' IDENTIFIED BY 'linux';" | mysql -u root -p --password='$sqlpassword'
	echo "CREATE DATABASE stocks;" | mysql -u root -p --password='$sqlpassword'
	echo "GRANT ALL PRIVILEGES ON stocks.* TO 'server'@'localhost';" | mysql -u root -p --password='$sqlpassword'
	echo "FLUSH PRIVILEGES;" | mysql -u root -p --password='$sqlpassword'
	echo "source /srv/stocks/schema.sql;" | mysql -u root -p --password='$sqlpassword'
	
	## Set up the CA
	cd /srv/stocks/root/CA
	mkdir certs csr private newcerts
	chmod 700 private
	touch index.txt
	echo 1000 > serial
	openssl genrsa -out private/ca.key.pem 4096
	chmod 400 private/ca.key.pem
	openssl req -config openssl.cnf -key private/ca.key.pem -new -x509 -days 365000 -sha256 -extensions v3_ca -out certs/ca.cert.pem \
        -subj "/C=CH/ST=Zurich/L=Zurich/O=stocks/CN=stocks CA" -batch
    chmod 444 certs/ca.cert.pem
    cd intermediate
    mkdir certs csr private newcerts
    chmod 700 private
    touch index.txt
    echo 1000 > serial
    openssl genrsa -out private/intermediate.key.pem 4096
    chmod 400 private/intermediate.key.pem
    openssl req -config openssl.cnf -new -sha256 -key private/intermediate.key.pem -out csr/intermediate.csr.pem \
        -subj "/C=CH/ST=Zurich/L=Zurich/O=stocks/CN=stocks intermediate CA" -batch
    cd ..
    openssl ca -config openssl.cnf -extensions v3_intermediate_ca -days 365000 -notext -md sha256 \
        -in intermediate/csr/intermediate.csr.pem -out intermediate/cert/intermediate.cert.pem
    chmod 444 intermediate/cert/intermediate.cert.pem
    cat intermediate/cert/intermediate.cert.pem cert/ca.cert.pem > intermediate/cert/ca-chain.cert.pem
    chmod 444 intermediate/cert/ca-chain.cert.pem
    cp cert/ca.cert.pem ../nginx/ca
    cp cert/ca.cert.pem ../nginx.conf.d/ssl/ca.cert.pem
    cp intermediate/cert/ca-chain.cert.pem ../nginx.conf.d/ssl/ca-chain.cert.pem
    
    ## Server certificate
    cd intermediate
    openssl genrsa -out private/server.key.pem 4096
    chmod 400 private/server.key.pem
    openssl req -config openssl.cnf -new -sha256 -key private/server.key.pem -out csr/server.csr.pem \
        -subj "/C=CH/ST=Zurich/L=Zurich/O=stocks/CN=stocks server" -batch
    openssl ca -config intermediate/openssl.cnf -extensions server_cert -days 375 -notext -md sha256 \
        -in csr/server.csr.pem -out certs/server.cert.pem
    chmod 444 certs/server.cert.pem
    cp certs/server.cert.pem ../../nginx.conf.d/ssl/nginx-server.cert.pem
    cp private/server.key.pem ../../nginx.conf.d/ssl/nginx-server.key.pem
        
    ## OCSP certificate
    openssl genrsa -out private/ocsp.key.pem 4096
    chmod 400 private/ocsp.key.pem
    openssl req -config openssl.cnf -new -sha256 -key private/ocsp.key.pem -out csr/ocsp.csr.pem \
        -subj "/C=CH/ST=Zurich/L=Zurich/O=stocks/CN=stocks OCSP" -batch
    openssl ca -config openssl.cnf -extensions server_cert -days 375 -notext -md sha256 \
        -in csr/ocsp.csr.pem -out certs/ocsp.cert.pem
    chmod 444 certs/ocsp.cert.pem
	
	chown -R stocks:users /srv/stocks/root
	
}

## arg 1:  the new package version
## arg 2:  the old package version
#pre_upgrade() {
	# do something here
#}

## arg 1:  the new package version
## arg 2:  the old package version
#post_upgrade() {
	# do something here
#}

## arg 1:  the old package version
#pre_remove() {
	# do something here
#}

## arg 1:  the old package version
post_remove() {
	rm -rf /srv/stocks
	userdel stocks
}
