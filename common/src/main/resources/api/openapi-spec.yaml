---
openapi: 3.0.3
info:
  title: Stocks
  version: 1.0.0
  license:
    name: GNU GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  description: |
    # Manage your household's stocks

    #### Versions

    Each entity in the system has a version which is incremented each time the
    entity is edited. This means all modifying operations have to pass the correct
    version of the entity to edit. If the version does not match an error is
    returned using status codes, see "Status Codes" for a list of status codes
    to support.

    #### Valid Time

    Each entity in the database is tagged with information about when it was present
    in the given state. This interval of validity is encoded using two timestamps,
    `validTimeStart` and `validTimeEnd`. The interval contains the starting
    timestamp while the ending timestamp is the first moment which is no longer
    included (closed-open notation, `[start, end)` using mathematical notation). See
    also the `bitemporal` flag.

    #### Transaction Time

    Each entity in the database is tagged with information about when the
    information of the entity was entered into the database. This allows for
    reconstruction of past states of the database. This interval of validity is
    encoded using two timestamps, `transactionTimeStart` and `transactionTimeEnd`.
    The interval contains the starting timestamp while the ending timestamp is the
    first moment which is no longer included (closed-open notation, `[start, end)`
    using mathematical notation). See also the `bitemporal` flag.

    #### Change Initiators

    Each entity record in the database stores, which user device initiated
    that change. This is indicated by the `initiates` field, which is only
    present if `bitemporal` data is requested, just as the timestamps
    described before.

    #### Timestamps

    The timestamp format used is `yyyy.MM.dd-HH:mm:ss.SSSSSS-Z`. Refer to
    [the Java API Reference](https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html)
    for semantics. The timestamps are passed as strings.

    The special date `+292278994.08.16-23:00:00.000000-+0000` is used in valid time
    to denote _infinity_ and in transaction time to denote _now_. It corresponds
    to 9223372036825200000 milliseconds since epoch.

    #### Status Codes

    Numbers reporting the result status of a request. The API refers to this
    via the `StatusCode` type.

    * `0`: Success

    * `1`: General error

    * `2`: Not found

    * `3`: Invalid data version

    * `4`: Foreign key constraint violation

    * `5`: Database unreachable

    * `6`: Access denied

    * `7`: Invalid argument

    * `8`: Certificate authority unreachable

    * `9`: Serialisation conflict. Will not be sent via API

    #### Principal names

    User and device names are part of the so called principals. They must not
    contain `=` or `$`.

    ### Prometheus

    Stocks exposes Prometheus metrics on the path `/stocks/metrics`. It gives
    information about request durations, circuit breaker events and command
    retries due to serialisation conflicts.

security:
  - type:
      - mutualTLS

externalDocs:
  url: https://gitlab.com/veenj/stocks

components:
  schemas:
    id:
      type: integer
      minimum: 1
      description: the primary identifier of the entity
    version:
      type: integer
      minimum: 0
      description: the current version of the entity
    Response:
      type: object
      properties:
        status:
          type: integer
          minimum: 0
          maximum: 9
          description: See general description, section "Status Codes"
    Data:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/id'
        version:
          $ref: '#/components/schemas/version'
    BitemporalData:
      allOf:
        - $ref: '#/components/schemas/Data'
        - type: object
          properties:
            initiates:
              type: integer
              minimum: 1
              description: |
                A reference to the UserDevice at the point in time when this
                entity was considered current.
            validTimeStart:
              type: string
              description: |
                The start of the time (inclusively) during which this entity is
                valid. Timestamp in the usual format.
            validTimeEnd:
              type: string
              description: |
                The end of the time (exclusively) during which this entity is
                valid. Timestamp in the usual format.
            transactionTimeStart:
              type: string
              description: |
                The start of the time (inclusively) during which this entity is
                part of the most recent truth on the data.
            transactionTimeEnd:
              type: string
              description: |
                The end of the time (exclusively) during which this entity is
                part of the most recent truth on the data.
    User:
      type: object
      properties:
        name:
          type: string
          description: The principal name of the user.
    UserDevice:
      type: object
      properties:
        name:
          type: string
          description: The principal name of the user device.
        userId:
          type: integer
          minimum: 1
          description: The id referencing the owning user.
    Update:
      type: object
      properties:
        table:
          type: string
          description: |
            One of
              * `User_device`
              * `User`
              * `Food`
              * `Location`
              * `Food_item`
              * `EAN_number`
              * `unit`
              * `scaled_unit`
              * `recipe`
              * `recipe_ingredient`
              * `recipe_product`
            The developers present their apologies for the inconsistent casing.
        lastUpdate:
          type: string
          description: |
            The timestamp when the last insertion or update on the table
            happened.
    Location:
      type: object
      properties:
        name:
          type: string
          description: The name of the location
          minLength: 1
        description:
          type: string
          description: Some description for users to set
    Food:
      type: object
      properties:
        name:
          type: string
          description: The name of the food type
          minLength: 1
        expirationOffset:
          type: integer
          description: The number of days after which this food usually expires
          minimum: 0
        location:
          type: integer
          minimum: 1
          description: |
            An id referencing the location where this food type is usually
            stored in.
        toBuy:
          type: boolean
          description: Is this food type marked to buy.
        storeUnit:
          type: integer
          minimum: 1
          description: |
            An id referencing the scaled unit which items of this type usually
            have.
        description:
          type: string
          description: Some description for users to set
    FoodItem:
      type: object
      properties:
        registers:
          type: integer
          minimum: 1
          description: |
            An id referencing the user device initially registering the food
            item.
        eatByDate:
          type: string
          description: A timestamp telling when the food item should be consumed
        ofType:
          type: integer
          minimum: 1
          description: |
            An id referencing the food type that describes this item.
        storedIn:
          type: integer
          minimum: 1
          description: |
            An id referencing the location where the item is stored.
        buys:
          type: integer
          minimum: 1
          description: |
            An id referencing the user who initially bought this item.
        unit:
          type: integer
          minimum: 1
          description: |
            An id referencing the scaled unit that describes the amount of this
            item.
    EanNumber:
      type: object
      properties:
        identifiesFood:
          type: integer
          minimum: 1
          description: |
            An id referencing the food type this ean number encodes.
        eanCode:
          type: string
          description: |
            The EAN Code
    Unit:
      type: object
      properties:
        name:
          type: string
          description: The name of the unit
        abbreviation:
          type: string
          description: The abbreviation of the unit
    ScaledUnit:
      type: object
      properties:
        scale:
          type: number
          description: The scale of the unit
        unit:
          type: integer
          description: An id referencing the unit of this scaled unit
    Recipe:
      type: object
      properties:
        name:
          type: string
          description: The name of the recipe
        instructions:
          type: string
          description: The cooking instructions for the recipe.
        duration:
          type: integer
          minimum: 1
          description: The number of minutes the recipe takes to prepare.
    RecipeIngredient:
      type: object
      properties:
        amount:
          type: integer
          description: The number of food this ingredient takes
          minimum: 0
        ingredient:
          type: integer
          minimum: 1
          description: An id referencing the food to use as ingredient
        unit:
          type: integer
          minimum: 1
          description: An id referencing the scaled unit this ingredient takes.
    RecipeIngredientWithRecipeId:
      allOf:
        - $ref: '#/components/schemas/RecipeIngredient'
        - type: object
          properties:
            recipe:
              type: integer
              minimum: 1
              description: An id referencing the recipe this ingredient belongs to
    RecipeProduct:
      type: object
      properties:
        amount:
          type: integer
          description: The number of food this product takes
          minimum: 0
        product:
          type: integer
          minimum: 1
          description: An id referencing the food this recipe produces
        unit:
          type: integer
          minimum: 1
          description: An id referencing the scaled unit this product takes.
    RecipeProductWithRecipeId:
      allOf:
        - $ref: '#/components/schemas/RecipeProduct'
        - type: object
          properties:
            recipe:
              type: integer
              minimum: 1
              description: An id referencing the recipe this product belongs to
    Health:
      type: object
      properties:
        data:
          type: object
          properties:
            database:
              type: boolean
            ca:
              type: boolean

  parameters:
    id:
      name: id
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/id'
      description: the primary identifier of the entity
    version:
      name: version
      in: query
      required: true
      schema:
        $ref: '#/components/schemas/version'
      description: the version of the entity on which the request operates
    bitemporal:
      name: bitemporal
      in: query
      schema:
        type: integer
        minimum: 0
        maximum: 1
      description: |
        Whether the response to a GET shall contain the bitemporal kind of the
        requested entity
    startingFrom:
      name: startingFrom
      in: query
      schema:
        type: string
      description: |
        A timestamp stating that a GET response shall only include entities
        younger or equal to this value in transaction time. This is used to only
        get the latest changes to a table relative to an earlier query. Must be
        present if `bitemporal` is 1.
    principalName:
      name: name
      in: query
      description: The principal name of the user or user device.
      required: true
      schema:
        type: string
        minLength: 1
        pattern: "[^$=]+"
    name:
      name: name
      in: query
      description: The name of the entity.
      required: true
      schema:
        type: string

  responses:
    "200-write":
      description: Data modification successful
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "200-write-returning-id":
      description: |
        Data modification successful. The ID of the main entity created is
        returned
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    type: integer
                    minimum: 1
                    description: |
                      The ID referencing the main entity of the request, which
                      is understood from the context.
    "GET-400":
      description: No `startingFrom` given.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "PUT-400-Principal-name":
      description: |
        This principal name is invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "PUT-400":
      description: |
        * Invalid name given (absent or empty)
        * The entity was requested for update in the wrong version
        * Invalid input (see parameter limits)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "DELETE-400":
      description: |
        * This entity cannot be deleted because some other entity refers to it,
          e.g. a user still having devices or a location still containing food.
        * The entity was requested for deletion in the wrong version
        * Invalid input (see parameter limits)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "401":
      description: |
        * An unauthorised user device wants access to the system
        * The user device tried to execute a forbidden action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "404":
      description: |
        * No entity with this id found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'
    "500":
      description: |
        * CA unreachable (User device operations only)
        * Database unreachable
        * General error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Response'

paths:
  /v2/update:
    get:
      responses:
        "200":
          description: Return for each table when the last write to it occured
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Update'
        "500":
          $ref: '#/components/responses/500'

  /v2/user:
    put:
      parameters:
        - $ref: '#/components/parameters/principalName'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400-Principal-name'
        "500":
          $ref: '#/components/responses/500'
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all users of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/User'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/User'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      description: |
        Delete the user. Only possible if all his devices have been deleted
        already.

        Any food item bought by this user will be set to be bought by the user
        issuing this request.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/device:
    put:
      parameters:
        - $ref: '#/components/parameters/principalName'
        - name: belongsTo
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/id'
      responses:
        "200":
          description: Return the ticket for the new device
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          deviceId:
                            $ref: '#/components/schemas/id'
                          ticket:
                            type: string
        "400":
          description: |
            * Invalid principal name
            * Invalid input (see parameter limits)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all user devices of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/UserDevice'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/UserDevice'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      description: |
        Delete the device and revoke access to the API via TLS certificate
        revokation.

        A device cannot delete itself or any device belonging user "Stocks".

        Any food item registered by this device will be set to be registered by
        the user device issuing this request.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/location:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all locations of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/Location'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/Location'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    put:
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      description: |
        Delete the location. Only possible if no food items are inside.

        Any food type referencing this location will end up without default
        location.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/location/rename:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
        - name: new
          in: query
          required: true
          schema:
            type: string
            minLength: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/location/description:
    post:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - description
              properties:
                description:
                  type: string
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/food:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all food types of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/Food'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/Food'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    put:
      parameters:
        - $ref: '#/components/parameters/name'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      description: |
        Delete the food type. This will delete all items and EAN codesof this
        type as well.
        
        This is only possible if no recipe ingredient or recipe product
        references this food type.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/food/edit:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
        - name: new
          in: query
          description: The new name of the entity.
          schema:
            type: string
            minLength: 1
        - name: expirationOffset
          in: query
          description: The new expiration offset to set in days.
          required: false
          schema:
            type: integer
            minimum: 0
        - name: location
          in: query
          description: |
            The id referencing the default location for this food to set.
          required: false
          schema:
            type: integer
            minimum: 0
        - name: storeunit
          in: query
          description: |
            The id referencing the default scaled unit this food is registered
            with.
          required: false
          schema:
            type: integer
            minimum: 0
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                description:
                  type: string
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/food/buy:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
        - name: buy
          in: query
          required: true
          description: Whether the food is to be set to buy
          schema:
            type: integer
            minimum: 0
            maximum: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/fooditem:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all food types of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/FoodItem'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/FoodItem'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    put:
      parameters:
        - name: eatByDate
          in: query
          required: true
          description: The timestamp by when the item should be consumed
          schema:
            type: string
        - name: storedIn
          in: query
          required: true
          description: An id referencing the location where this item is stored.
          schema:
            type: integer
            minimum: 1
        - name: ofType
          in: query
          required: true
          description: An id referencing the food this item is type of.
          schema:
            type: integer
            minimum: 1
        - name: unit
          in: query
          required: true
          description: An id referencing the scaled unit of this item.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      description: |
        Delete the food item.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/fooditem/edit:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
        - name: eatByDate
          in: query
          required: true
          description: The timestamp by when the item should be consumed
          schema:
            type: string
        - name: storedIn
          in: query
          required: true
          description: An id referencing the location where this item is stored.
          schema:
            type: integer
            minimum: 1
        - name: unit
          in: query
          required: true
          description: An id referencing the scaled unit of this item.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
  /v2/ean:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all EAN numbers of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/EanNumber'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/EanNumber'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    put:
      parameters:
        - name: code
          in: query
          required: true
          description: The code to add
          schema:
            type: string
        - name: identifies
          in: query
          required: true
          description: An id referencing the food type this code describes.
          schema:
            type: integer
            minimum: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      description: |
        Delete the EAN number.
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/unit:
    put:
      parameters:
        - name: name
          in: query
          schema:
            type: string
            minLength: 1
        - name: abbreviation
          in: query
          schema:
            type: string
            minLength: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all units of measure of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/Unit'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/Unit'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/unit/rename:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
        - name: name
          in: query
          schema:
            type: string
            minLength: 1
        - name: abbreviation
          in: query
          schema:
            type: string
            minLength: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/scaled-unit:
    put:
      parameters:
        - name: scale
          in: query
          schema:
            type: number
        - name: unit
          in: query
          schema:
            type: integer
            minLength: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all scaled units of measure of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/ScaledUnit'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/ScaledUnit'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/scaled-unit/edit:
    put:
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/version'
        - name: scale
          in: query
          schema:
            type: number
        - name: unit
          in: query
          schema:
            type: integer
            minLength: 1
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/recipe:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all recipes of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/Recipe'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/Recipe'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe:
                  $ref: '#/components/schemas/Recipe'
                ingredients:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeIngredient'
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeProduct'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
    delete:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe:
                  $ref: '#/components/schemas/Data'
                ingredients:
                  type: array
                  items:
                    $ref: '#/components/schemas/Data'
                products:
                  type: array
                  items:
                    $ref: '#/components/schemas/Data'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/DELETE-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/recipe/edit:
    put:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipe:
                  allOf:
                    - $ref: '#/components/schemas/Data'
                    - $ref: '#/components/schemas/Recipe'
                ingredients:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/Data'
                      - $ref: '#/components/schemas/RecipeIngredientWithRecipeId'
                ingredientsToInsert:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeIngredient'
                ingredientsToDelete:
                  type: array
                  items:
                    $ref: '#/components/schemas/Data'
                products:
                  type: array
                  items:
                    allOf:
                      - $ref: '#/components/schemas/Data'
                      - $ref: '#/components/schemas/RecipeProductWithRecipeId'
                productsToInsert:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipeProduct'
                productsToDelete:
                  type: array
                  items:
                    $ref: '#/components/schemas/Data'
      responses:
        "200":
          $ref: '#/components/responses/200-write'
        "400":
          $ref: '#/components/responses/PUT-400'
        "404":
          $ref: '#/components/responses/404'
        "500":
          $ref: '#/components/responses/500'
  /v2/recipe-ingredient:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all recipe ingredients of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/RecipeIngredient'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/RecipeIngredient'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
  /v2/recipe-product:
    get:
      parameters:
        - $ref: '#/components/parameters/bitemporal'
        - $ref: '#/components/parameters/startingFrom'
      responses:
        "200":
          description: Return all recipe products of the system
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          oneOf:
                            - allOf:
                                - $ref: '#/components/schemas/RecipeProduct'
                                - $ref: '#/components/schemas/BitemporalData'
                            - allOf:
                                - $ref: '#/components/schemas/RecipeProduct'
                                - $ref: '#/components/schemas/Data'
        "400":
          $ref: '#/components/responses/GET-400'
        "500":
          $ref: '#/components/responses/500'
  /health:
    get:
      description: |
        Inform about server health. It performs a test for DB connectivity and
        whether the CA can be found.
      responses:
        "200":
          description: Server health is ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - $ref: '#/components/schemas/Health'
        "500":
          description: Server health is not ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - $ref: '#/components/schemas/Health'
  /ca:
    get:
      description: |
        The CA certificate used by the registration endpoint and the rest of
        the system API. The client SHOULD verify the authenticity by getting the
        CA's fingerprint off-band from an existing device as this endpoint uses
        plain HTTP.

        This endpoint is hosted outside the system's main API path. So if all
        other endpoints are hosted at `https://domain.example:10912/v2/...`
        this endpoint might well be hosted on `http://domain.example:10910/ca`.
      responses:
        "200":
          description: The PEM encoded X.509 stocks CA certificate.
          content:
            text/plain:
              schema:
                type: string
  /v2/auth/newuser:
    post:
      description: |
        Register a new user device on this server. This endpoint is hosted on
        a different port as it requires no mandatory TLS client authentication.

        Make sure to import the server's CA certificate hosted on `/ca` before
        connecting to ensure secure communication.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              required:
                - device
                - token
                - csr
              properties:
                device:
                  type: integer
                  minimum: 1
                  description: |
                    An id referencing the already created user device which
                    desires access to the system. Returned by `PUT /v2/device`.
                token:
                  type: string
                  minLength: 1
                  description: |
                    A token aka ticket granting access to the system. Returned
                    by `PUT /v2/device`.
                csr:
                  type: string
                  description: |
                    A PEM encoded X.509 certificate signing request belonging to
                    the key the device created to get access to the system.
      responses:
        "200":
          description: The device was successfully registered.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: string
                        description: |
                          A PEM encoded X.509 client certificate giving the
                          client access to the system.
        "401":
          $ref: '#/components/responses/401'
  "/v3/food":
    put:
      description: Add a food type.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Food'
      responses:
        "200":
          $ref: '#/components/responses/200-write-returning-id'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
  "/v3/location":
    put:
      description: Add a location.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
      responses:
        "200":
          $ref: '#/components/responses/200-write-returning-id'
        "400":
          $ref: '#/components/responses/PUT-400'
        "500":
          $ref: '#/components/responses/500'
