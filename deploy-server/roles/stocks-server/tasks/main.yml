---
- name: Copy package
  copy:
    src: "{{ stocks_pkg_dir }}/{{ stocks_pkg }}"
    dest: "{{ remote_pkg_dir }}"

- name: Install stocks package
  become: True
  pacman:
    name: "{{ remote_pkg_dir }}/{{ stocks_pkg }}"
    state: present

- name: Configure stocks
  become: True
  template:
    src: stocks.properties.j2
    dest: "{{ stocks_etc }}/stocks.properties"
    owner: tomcat8
    group: tomcat8
    mode: 0644

- name: Link server.war
  become: True
  file:
    src: "{{ stocks_lib }}/server.war"
    dest: /usr/share/tomcat8/webapps/server.war
    owner: tomcat8
    group: tomcat8
    state: link

- name: Install tomcat config
  become: True
  copy:
    src: "{{ stocks_base }}/server.xml"
    dest: /usr/share/tomcat8/conf/server.xml
    remote_src: True
    owner: tomcat8
    group: tomcat8
    backup: True

- name: Start tomcat
  become: True
  service:
    name: tomcat8
    state: started

- name: Start MariaDB
  become: True
  service:
    name: mysqld
    state: started

- name: Setup database
  mysql_db:
    name: "{{ mysql_stocks_database }}"
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Setup database user
  mysql_user:
    name: "{{ mysql_stocks_username }}"
    password: "{{ mysql_stocks_password }}"
    priv: stocks.*:ALL
    state: present
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Import database schema
  mysql_db:
    name: "{{ mysql_stocks_database }}"
    state: import
    target: "{{ stocks_base }}/schema.sql"
    login_user: root
    login_password: "{{ mysql_root_password }}"

- name: Create CA
  command: "{{ stocks_lib }}/setup-ca {{ stocks_base }}/root/CA {{ stocks_base }}"
  become: True
  become_user: tomcat8

- name: Create CA download point
  become: True
  copy:
    src: "{{ stocks_base }}/root/CA/certs/ca.cert.pem"
    dest: "{{ stocks_base }}/root/nginx/ca"
    remote_src: True
    owner: tomcat8
    group: tomcat8

- name: Create chain download point
  become: True
  copy:
    src: "{{ stocks_base }}/root/CA/intermediate/certs/ca-chain.cert.pem"
    dest: "{{ stocks_base }}/root/nginx/chain"
    remote_src: True
    owner: tomcat8
    group: tomcat8

- name: Create nginx SSL
  become: True
  file:
    path: /etc/nginx/ssl
    state: directory

- name: Copy CA cert
  become: True
  copy:
    src: "{{ stocks_base }}/root/CA/certs/ca.cert.pem"
    dest: /etc/nginx/ssl/ca.cert.pem
    remote_src: True
    owner: root
    group: root

- name: Copy CA chain
  become: True
  copy:
    src: "{{ stocks_base }}/root/CA/intermediate/certs/ca-chain.cert.pem"
    dest: /etc/nginx/ssl/ca-chain.cert.pem
    remote_src: True
    owner: root
    group: root

- name: Copy server cert
  become: True
  copy:
    src: "{{ stocks_base }}/root/CA/intermediate/certs/server.cert.pem"
    dest: /etc/nginx/ssl/server.cert.pem
    remote_src: True
    owner: root
    group: root

- name: Copy server key
  become: True
  copy:
    src: "{{ stocks_base }}/root/CA/intermediate/private/server.key.pem"
    dest: /etc/nginx/ssl/server.key.pem
    remote_src: True
    owner: root
    group: root

- name: Check for dhparams
  become: True
  stat:
      path: /etc/nginx/ssl/dhparam.pem
  register: dhparam

- name: Generate dhparams
  become: True
  command: openssl dhparam -out /etc/nginx/ssl/dhparam.pem 4096
  when: not dhparam.stat.exists

- name: Add nginx reload to sudoers
  become: True
  shell: echo {{ sudoers_line }} >> /etc/sudoers

- name: Install nginx config conservatively
  become: True
  copy:
    src: "{{ stocks_base }}/nginx.example.conf"
    dest: /etc/nginx/nginx.conf
    remote_src: True
    owner: root
    group: root
    backup: True

- name: Reload nginx
  become: True
  service:
    name: nginx
    state: reloaded

- name: Start nginx server
  become: True
  service:
    name: nginx
    state: started

- name: Setup first user in DB
  template: 
    src: initial_user.sql.j2
    dest: "{{ remote_pkg_dir }}/initial_user.sql"
    owner: tomcat8
    group: tomcat8
    mode: 0644
    
- name: Add first user
  mysql_db:
    name: "{{ mysql_stocks_database }}"
    state: import
    target: "{{ remote_pkg_dir }}/initial_user.sql"
    login_user: "{{ mysql_stocks_username }}"
    login_password: "{{ mysql_stocks_password }}"

- name: Wait for Tomcat startup
  wait_for: 
    host: 127.0.0.1
    port: 10915
    state: started
